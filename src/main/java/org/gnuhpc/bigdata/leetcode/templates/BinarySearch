二分搜索

熟练掌握四大要点，明白三大判断条件

            if (target == nums[mid]) {
                end = mid; //往前找
                //If you'd like to fetch the last idx of the target, use the following statement instead:
//                start = mid; //往后找
            } else if (target > nums[mid]) {
                start = mid;
            } else {
                end = mid;
            }

1. 一般碰到有序数组第一个反应就应该是二分，对数字进行二分进行查找，主要是数值。
LC相关题目
4

2. 对idx，也就是个数进行二分
LC相关题目
4

例如可以求一个有序数组arr中小于等于number的数字个数
    private int countSmallerOrEqual(int[] arr, int number) {
        //这是对idx进行二分
        int start = 0, end = arr.length - 1;

        // find first index that arr[index] > number;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] <= number) {
                start = mid;
            } else {
                end = mid;
            }
        }

        if (arr[start] > number) {
            return start;
        }

        if (arr[end] > number) {
            return end;
        }

        return arr.length;
    }
LC相关题目

3. 对于有序数组，用二分法去直接猜结果对不对
LC相关题目
875
14 解法2

4. 对于double，就不能使用start+1<end这种while条件了，而是要根据题意中的误差范围进行
while (end - start > 1e-6)

LC相关题目
774