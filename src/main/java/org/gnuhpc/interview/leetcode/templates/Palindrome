回文类题目，回文有一个特点就是从中间开始向两边扩散是对称的，

这个中间要分两种情况
第一种是从一个点向两边扩展，对应的结果是一个奇数个字符的回文字符串
第二种是从两个相同的点出发向两边扩展，对应的结果是一个偶数个字符的回文字符串

实际写代码的时候不管什么情况都要对第一种情况进行遍历，然后对第二种情况因为是有条件的，
因此要先判断相邻元素是不是相等，如果是则进行。

回文类题目另一种解法是DP，DP的模板是
        char[] sCh = s.toCharArray();
        int len = s.length();
        boolean[][] dp = new boolean[len + 1][len + 1];
        for (int i = len - 1; i >= 0; i--) {//为什么从后往前是因为递归公式中需要i+1的结果
            for (int j = i; j < len; j++) {
                if(i == j) dp[i][j] = true; //base case 1
                else if(j == i+1) dp[i][j] = (sCh[i] == sCh[j]);//base case 2
                else //递推公式
                    dp[i][j] = (sCh[i] == sCh[j])? dp[i + 1][j - 1]:false;

                //在这里处理结果！！

            }
        }

LC相关题目：
5,647
