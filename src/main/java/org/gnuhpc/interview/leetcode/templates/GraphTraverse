1. 图遍历的时候一定要设置visited。
2. DFS的过程
对所有节点进行遍历，首先判断是否访问过，如果没有的话放入visited然后进入DFS,
DFS函数对该节点的邻居遍历，也是先判断是否访问过，如果没有的话放入visited然后进入DFS.

LC相关题目：
721

3. BFS 的过程
创建queue， visited， 添加第一个节点
进入循环后取出来节点n，进行处理，然后对n的邻居挨个判断是不是visited，如果没有则放入queue，并添加visited中

LC相关题目：
127 Method4

4. 对于有权图的权重加权计算，在DFS、BFS中遍历邻居的时候可以进行
在DFS中可以直接使用递归进行结果计算，例如LC 399中的DFS解法

在BFS中可以使用如下的结构进行存储
// KeyName <-> Accumulated Value
Map<String, Double> value = new HashMap<>();    //distance from starting point

LC相关题目：
399

5. 图转化为树的时候树根是入度是0，具体出入度计算如下
        //由于是从1开始，因此开n+1的数组
        int[] in = new int[n + 1],out = new int[n + 1];//记录每个节点的出度与入度
        for(int[] nums:edges){
            graph[nums[0]].add(nums[1]);
            out[nums[0]]++;
            in[nums[1]]++;
        }

LC相关题目
685

6. 连通性的问题都可以用DFS+visited进行
LC相关题目
685

